
AtmegatoArduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000853  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000641  00000000  00000000  00000b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b9  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000347  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037d  00000000  00000000  00001913  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 88 00 	call	0x110	; 0x110 <main>
  74:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <sendChar>:
volatile int breakloop=0;



void sendChar(unsigned char c){
	while (! (UCSRA & (1 << UDRE)) );
  7c:	5d 9b       	sbis	0x0b, 5	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <sendChar>
	
	UDR = c;//once transmitter is ready sent eight bit data
  80:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	87 e8       	ldi	r24, 0x87	; 135
  84:	93 e1       	ldi	r25, 0x13	; 19
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <sendChar+0xa>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <sendChar+0x10>
  8c:	00 00       	nop
  8e:	08 95       	ret

00000090 <receiveChar>:

	_delay_ms(20);
}

unsigned char receiveChar(){
	while ( (UCSRA & (1 << RXC)) == 0x00 );
  90:	5f 9b       	sbis	0x0b, 7	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <receiveChar>
	
	return UDR ;
  94:	8c b1       	in	r24, 0x0c	; 12
	_delay_ms(20);
}
  96:	08 95       	ret

00000098 <__vector_2>:

ISR(INT1_vect)
{
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	2f 93       	push	r18
  a4:	3f 93       	push	r19
  a6:	4f 93       	push	r20
  a8:	5f 93       	push	r21
  aa:	6f 93       	push	r22
  ac:	7f 93       	push	r23
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
  b2:	af 93       	push	r26
  b4:	bf 93       	push	r27
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
	PORTA = 7;
  ba:	87 e0       	ldi	r24, 0x07	; 7
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	87 ea       	ldi	r24, 0xA7	; 167
  c0:	91 e6       	ldi	r25, 0x61	; 97
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <__vector_2+0x2a>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <__vector_2+0x30>
  c8:	00 00       	nop
	_delay_ms(100);
	PORTA = 0;
  ca:	1b ba       	out	0x1b, r1	; 27
	sendChar('b');
  cc:	82 e6       	ldi	r24, 0x62	; 98
  ce:	0e 94 3e 00 	call	0x7c	; 0x7c <sendChar>
	breakloop = 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  de:	8f e4       	ldi	r24, 0x4F	; 79
  e0:	93 ec       	ldi	r25, 0xC3	; 195
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <__vector_2+0x4a>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <__vector_2+0x50>
  e8:	00 00       	nop
	_delay_ms(200);
	GIFR = 0xFF;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	8a bf       	out	0x3a, r24	; 58
}
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	bf 91       	pop	r27
  f4:	af 91       	pop	r26
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	7f 91       	pop	r23
  fc:	6f 91       	pop	r22
  fe:	5f 91       	pop	r21
 100:	4f 91       	pop	r20
 102:	3f 91       	pop	r19
 104:	2f 91       	pop	r18
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <main>:

int main(void)

{
	DDRA &= ~(1 << PINA0);//pin0 of portD as INPUT
 110:	d0 98       	cbi	0x1a, 0	; 26
	DDRA |= (1 << PINA1) | (1 << PINA2) | (1 << PINA3) | (1 << PINA7);
 112:	8a b3       	in	r24, 0x1a	; 26
 114:	8e 68       	ori	r24, 0x8E	; 142
 116:	8a bb       	out	0x1a, r24	; 26
	int UBBRValue = 12;//AS described before setting baud rate 9600BPS, double transmission
	UBRRH = (unsigned char) (UBBRValue >> 8);
 118:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) UBBRValue;
 11a:	8c e0       	ldi	r24, 0x0C	; 12
 11c:	89 b9       	out	0x09, r24	; 9
	UCSRA = 2;
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1 << RXEN) | (1 << TXEN);    //Enable the receiver and transmitter
 122:	88 e1       	ldi	r24, 0x18	; 24
 124:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0b10000110;
 126:	86 e8       	ldi	r24, 0x86	; 134
 128:	80 bd       	out	0x20, r24	; 32
	unsigned char k;
	int buttonPressed = 0;
	
	MCUCR = MCUCR & 0b11110011;
 12a:	85 b7       	in	r24, 0x35	; 53
 12c:	83 7f       	andi	r24, 0xF3	; 243
 12e:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR | 0b00001000;
 130:	85 b7       	in	r24, 0x35	; 53
 132:	88 60       	ori	r24, 0x08	; 8
 134:	85 bf       	out	0x35, r24	; 53
	GICR = (1<<INT1); 
 136:	80 e8       	ldi	r24, 0x80	; 128
 138:	8b bf       	out	0x3b, r24	; 59
	sei();
 13a:	78 94       	sei
			
		}
		
		if(buttonPressed == 1)
		{
			PORTA=2;
 13c:	02 e0       	ldi	r16, 0x02	; 2
			{
				k=receiveChar();
				UDR =0;
				if(k == '1')
				{
					PORTA=4;
 13e:	14 e0       	ldi	r17, 0x04	; 4
				
				k=receiveChar();
				UDR =0;
				if(k == '2')
				{
					PORTA=8;
 140:	d8 e0       	ldi	r29, 0x08	; 8
				
			}
			buttonPressed = 0;
		}
		
		PORTA = 0b10000000;
 142:	c0 e8       	ldi	r28, 0x80	; 128
	while (1)

	{
		//sendChar('s');
		k='0';
		if(PINA & (1 << DDA0))
 144:	c8 9b       	sbis	0x19, 0	; 25
 146:	35 c0       	rjmp	.+106    	; 0x1b2 <main+0xa2>
			
		}
		
		if(buttonPressed == 1)
		{
			PORTA=2;
 148:	0b bb       	out	0x1b, r16	; 27
 14a:	8f e4       	ldi	r24, 0x4F	; 79
 14c:	93 ec       	ldi	r25, 0xC3	; 195
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0x3e>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x44>
 154:	00 00       	nop
			_delay_ms(200);
			PORTA=0;
 156:	1b ba       	out	0x1b, r1	; 27
			sendChar('s');
 158:	83 e7       	ldi	r24, 0x73	; 115
 15a:	0e 94 3e 00 	call	0x7c	; 0x7c <sendChar>
 15e:	83 ec       	ldi	r24, 0xC3	; 195
 160:	99 e0       	ldi	r25, 0x09	; 9
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x52>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x58>
 168:	00 00       	nop
			
			_delay_ms(10);
			
			while(1)
			{
				k=receiveChar();
 16a:	0e 94 48 00 	call	0x90	; 0x90 <receiveChar>
				UDR =0;
 16e:	1c b8       	out	0x0c, r1	; 12
				if(k == '1')
 170:	81 33       	cpi	r24, 0x31	; 49
 172:	41 f4       	brne	.+16     	; 0x184 <main+0x74>
				{
					PORTA=4;
 174:	1b bb       	out	0x1b, r17	; 27
 176:	8f e4       	ldi	r24, 0x4F	; 79
 178:	93 ec       	ldi	r25, 0xC3	; 195
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0x6a>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x70>
 180:	00 00       	nop
					_delay_ms(200);
					PORTA=0;
 182:	1b ba       	out	0x1b, r1	; 27
				}
				
				k=receiveChar();
 184:	0e 94 48 00 	call	0x90	; 0x90 <receiveChar>
				UDR =0;
 188:	1c b8       	out	0x0c, r1	; 12
				if(k == '2')
 18a:	82 33       	cpi	r24, 0x32	; 50
 18c:	41 f4       	brne	.+16     	; 0x19e <main+0x8e>
				{
					PORTA=8;
 18e:	db bb       	out	0x1b, r29	; 27
 190:	8f e4       	ldi	r24, 0x4F	; 79
 192:	93 ec       	ldi	r25, 0xC3	; 195
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x84>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x8a>
 19a:	00 00       	nop
					_delay_ms(200);
					PORTA=0;
 19c:	1b ba       	out	0x1b, r1	; 27
				}
				
				if(breakloop == 1)
 19e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1a2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	01 f7       	brne	.-64     	; 0x16a <main+0x5a>
				{
					breakloop = 0;
 1aa:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 1ae:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				
			}
			buttonPressed = 0;
		}
		
		PORTA = 0b10000000;
 1b2:	cb bb       	out	0x1b, r28	; 27
 1b4:	87 ea       	ldi	r24, 0xA7	; 167
 1b6:	91 e6       	ldi	r25, 0x61	; 97
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0xa8>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0xae>
 1be:	00 00       	nop
		_delay_ms(100);
		PORTA = 0;
 1c0:	1b ba       	out	0x1b, r1	; 27
		

	}
 1c2:	c0 cf       	rjmp	.-128    	; 0x144 <main+0x34>

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
